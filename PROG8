/************************************************************************
    CSCI 340 section 1
    TA: Daniel Baker
    James Wilson
    z1739305
    Assignment: 8
    Date Due: 11-16-17

    Description: Working with heaps
*************************************************************************/
#include "/home/cs340/progs/17f/p8/prog8.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

int main()
    {
    vector < int >    v1;   // heap of integers
    vector < float >  v2;   // heap of floating-pt nums
    vector < string > v3;   // heap of strings

    // print header message
    cout << "\t\t\t*** CSCI 340: Program 8 - Output ***\n\n";

    // first heap

    cout << "first heap - ascending order:\n\n";
    get_list ( v1, D1 );
    construct_heap ( v1, less < int > ( ) );
    print_list < int > print1 ( v1.size ( ), INT_SZ, INT_LN );
    for_each ( v1.begin ( ), v1.end ( ), print1 );

    cout << "first heap - descending order:\n\n";
    get_list ( v1, D1 );
    construct_heap ( v1, greater < int > ( ) );
    for_each ( v1.begin ( ), v1.end ( ), print1 );

    // second heap

    cout << "second heap - ascending order:\n\n";
    get_list ( v2, D2 );
    construct_heap ( v2, less < float > ( ) );
    print_list < float > print2 ( v2.size ( ), FLT_SZ, FLT_LN );
    for_each ( v2.begin ( ), v2.end ( ), print2 );

    cout << "second heap - descending order:\n\n";
    get_list ( v2, D2 );
    construct_heap ( v2, greater < float > ( ) );
    for_each ( v2.begin ( ), v2.end ( ), print2 );

    // third heap

    cout << "third heap - ascending order:\n\n";
    get_list ( v3, D3 );
    construct_heap ( v3, less < string > ( ) );
    print_list < string > print3 ( v3.size ( ), STR_SZ, STR_LN );
    for_each ( v3.begin ( ), v3.end ( ), print3 );

    cout << "third heap - descending order:\n\n";
    get_list ( v3, D3 );
    construct_heap ( v3, greater < string > ( ) );
    for_each ( v3.begin ( ), v3.end ( ), print3 );

    // print termination message
    cout << "\t\t\t*** end of program execution ***\n\n";
    return 0;
   }

/************************************************
    FUNCTION: void get_list(vector<T>&, const char*)

    ARGUMENTS: template vector reference, const char pointer

    RETURNS: nothing

    NOTES: creates a clear vector and then gets the list from a file
************************************************/
template <class T>
void get_list(vector <T>& v, const char* path)
   {
   v.clear(); //gets rid of any unneeded data
   T temp;
   ifstream inFile; //open file stream
   inFile.open(path);
   if(!inFile) //incase it doesnt open
      {
      cout << "Error, file not opened.";
      exit(1);
      }

   inFile >> temp; //put data into temp sotrage
   while(!inFile.eof()) //const iterator did not work so I looked up eof for infile
      {
      v.push_back(temp); //add data
      inFile >> temp;
      }

   inFile.close(); //finih the input stream
   }

/************************************************
    FUNCTION: void construct_heap(vector<T>&, P)

    ARGUMENTS: vector template reference, object of class P

    RETURNS: nothing

    NOTES: calls make heap and then calls sort heap
************************************************/
template <class T, class P>
void construct_heap(vector <T>& v, P pred)
   {
   make_heap(v.begin(), v.end(), pred); //make heap
   sort_heap(v.begin(), v.end(), pred); //organize heap
   }

/************************************************
    FUNCTION: print_list(const unsigned&, const unsigned&, const unsigned&, const unsigned&)

    ARGUMENTS: constant unsigned refernce to s, w, l, and c

    RETURNS: nothing, constructor

    NOTES: constructor for private variables
************************************************/
template <class T>
print_list<T>::print_list(const unsigned& s, const unsigned& w, const unsigned& l, const unsigned& c)
   {
   sz = s; //initialize sz
   wid = w; //initialize wid
   len = l; //initialize len
   cnt = c; //initialize cnt
   }

/************************************************
    FUNCTION: void operator()(const T&)

    ARGUMENTS: const template object reference

    RETURNS: nothing

    NOTES: prints out the vector heap and formats it
************************************************/
template <class T>
void print_list<T>::operator()(const T& x)
   {
   cout.width(wid);
   cout.precision(2);
   cout << fixed << showpoint;

   if(cnt <= sz) //count of line is less than or equal to size of line
      {
      if(cnt % len == 0) //remainder of count / length
         {
         cout << endl;
         }
      cout << x << " "; //print out the heap data
      cnt++; //add to the line count
      }
   if(cnt == sz) //start from the beginning of a new line
      cout << endl << endl;
   }
